1Ô∏è‚É£ Clase y objeto
C++	Python
class Producto { ... };	class Producto:
Constructor: Producto(string codigo, string nombre, int cantidad, float precio) {...}	def __init__(self, codigo, nombre, cantidad, precio): ...
Crear objeto: Producto p1("A001", "Manzanas", 50, 1.2);	p1 = Producto("A001", "Manzanas", 50, 1.2)
Notas:
En Python no hace falta punto y coma ni llaves {}.
self en Python equivale a this en C++: referencia al objeto actual.
2Ô∏è‚É£ Atributos y m√©todos
C++	Python
string nombre;	self.nombre = nombre
int cantidad;	self.cantidad = cantidad
M√©todo: void mostrar() { cout << nombre; }	def mostrar(self): print(self.nombre)
Notas:
Python no tiene tipos obligatorios, pero puedes a√±adir type hints si quieres:
def __init__(self, codigo: str, nombre: str, cantidad: int, precio: float):
    ...
3Ô∏è‚É£ Modificadores de acceso
C++	Python
private, public, protected	Python no tiene privados estrictos. Se usa convenci√≥n: _atributo o __atributo
Ejemplo C++: private: int cantidad;	Python: self._cantidad = cantidad (convenci√≥n: no acceder fuera de la clase)
4Ô∏è‚É£ Composici√≥n (has-a)
En C++:
class Almacen {
    map<string, Producto> inventario;
};
En Python:
class Almacen:
    def __init__(self):
        self.inventario = {}  # clave: c√≥digo del producto, valor: objeto Producto
La idea es la misma: un objeto contiene otros objetos.
En Python usamos diccionarios o listas para almacenar los objetos contenidos.
5Ô∏è‚É£ Herencia (is-a)
C++:
class Estudiante : public Persona { ... };
Python:
class Estudiante(Persona):
    def __init__(self, nombre, matricula):
        super().__init__(nombre)
        self.matricula = matricula
super() llama al constructor de la clase padre.
Herencia y polimorfismo funcionan igual que en C++.
6Ô∏è‚É£ Archivos y modularidad
C++:
// Producto.h
class Producto { ... };
// Producto.cpp
#include "Producto.h" ...
Python:
# producto.py
class Producto: ...
# main.py
from producto import Producto
Cada clase en un archivo .py ‚Üí como tus .h + .cpp.
No hace falta declarar funciones antes de definirlas como en C++.
üí° Resumen clave
self = this
diccionarios/listas = mapas/vectores
m√≥dulos = archivos .h/.cpp
no hay tipado obligatorio, pero puedes usar type hints.
composici√≥n y herencia = lo mismo que en C++
