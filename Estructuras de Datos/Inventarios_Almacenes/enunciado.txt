Proyecto: Gesti√≥n de Inventarios por Almac√©n
Objetivo
Crear un sistema que permita administrar productos en varios almacenes de una empresa. Cada almac√©n tiene su propio inventario de productos, y cada producto tiene atributos como c√≥digo, nombre, cantidad y precio.
Estructuras de datos sugeridas
Producto ‚Üí clase con atributos:
codigo (string, clave √∫nica del producto)
nombre (string)
cantidad (int)
precio (float)
Almac√©n ‚Üí clase con composici√≥n:
nombre (string)
inventario (diccionario donde clave = c√≥digo del producto, valor = objeto Producto)
M√©todos sugeridos:
agregar_producto(producto)
eliminar_producto(codigo)
actualizar_stock(codigo, cantidad)
mostrar_inventario()
Empresa ‚Üí clase con composici√≥n:
nombre (string)
almacenes (diccionario donde clave = nombre del almac√©n, valor = objeto Almac√©n)
M√©todos sugeridos:
agregar_almacen(nombre)
eliminar_almacen(nombre)
mostrar_almacenes()
transferir_producto(codigo, cantidad, origen, destino)
Operaciones que debes implementar
Agregar, eliminar y modificar productos dentro de cada almac√©n.
Mostrar el inventario completo de un almac√©n.
Agregar y eliminar almacenes.
Transferir productos entre almacenes (disminuir stock en origen y aumentar en destino).
Opcional: calcular valor total de inventario por almac√©n o por empresa.
Ideas de estructura de archivos
inventario_empresa/
‚îÇ
‚îú‚îÄ‚îÄ producto.py        # Clase Producto
‚îú‚îÄ‚îÄ almacen.py         # Clase Almac√©n
‚îú‚îÄ‚îÄ empresa.py         # Clase Empresa
‚îî‚îÄ‚îÄ main.py            # Interfaz de usuario / men√∫ principal
Cada clase en su propio archivo ‚Üí pr√°ctica de modularidad y organizaci√≥n como en C++.
main.py contendr√° un men√∫ interactivo para probar todas las funciones (como hiciste con la agenda de contactos).
Puntos importantes a practicar
Composici√≥n: Almac√©n contiene Productos, Empresa contiene Almacenes.
Diccionarios: Para buscar productos por c√≥digo y almacenes por nombre en O(1).
Validaciones: Comprobar que no se agregue un producto duplicado, no transferir m√°s de lo que hay, etc.
Iteraci√≥n sobre diccionarios: Para mostrar inventarios y almacenes.
Entrada del usuario: Validar tipos de datos (str, int, float) como hiciste con la agenda.
üí° Mini desaf√≠o extra (opcional):
Implementa una funci√≥n que muestre los productos m√°s caros o m√°s baratos en todos los almacenes de la empresa.
Implementa b√∫squeda de productos por nombre parcial, no solo por c√≥digo.
